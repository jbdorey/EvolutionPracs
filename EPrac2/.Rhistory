rate.cat = 1,
# A rate matrix (for the number of trait factors) to optimise
rate.mat = matrix(c(NA,1,1,NA),2,2)
)
# Have a look at the output
cor_margRecon
# Choose the colours to use once
cols <- setNames(c("darkorange", "darkgreen"),
levels(finchSummary$beakCat))
# Let's plot the tree.
phytools::plotTree.datamatrix(treeML_fixed,
data.frame(beakVector),
colors = list(cols), header = FALSE, fsize = 0.45)
legend("bottomleft", legend = levels(finchSummary$beakCat), pch = 22, pt.cex = 1.5,
pt.bg = cols, bty = "n", cex = 0.8)
ape::nodelabels(pie = cor_margRecon$states, piecol = cols, cex = 0.5)
install.packages("tcolorbox")
?print
source("~/.active-rstudio-document", echo=TRUE)
version
base::version
?c
?read.table
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
# Load core packages
library(dplyr)
library(readr)
demonstratorVersion = FALSE
# This is a comment explaining the code below
x <- 5
y <- 3
sum <- x + y
print(sum)
rm(list=ls())
a <- 4
b <- 2
a
b
a + b
a * a
a - a*b
c <- a + b
class(a)
class(c)
hi <- "hello"
class(hi)
?class
x <- c(4,8,2)
y <- c(6,8,9)
snakes <- c("cobra", "brown snake", "python")
class(x)
class(snakes)
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
# Load core packages
library(dplyr)
library(readr)
demonstratorVersion = FALSE
# This is a comment explaining the code below
x <- 5
y <- 3
sum <- x + y
print(sum)
rm(list=ls())
a <- 4
b <- 2
a
b
a + b
a * a
a - a*b
c <- a + b
class(a)
class(c)
hi <- "hello"
class(hi)
?class
x <- c(4,8,2)
y <- c(6,8,9)
snakes <- c("cobra", "brown snake", "python")
class(x)
class(snakes)
invec <- 1:10
invec
squarex
squarex <- x^2
squarootx <- sqrt(x)
xagain <- sqrt(squarex)
sumx <- sum(x)
sumxy <- sum(x,y)
prodxy <- x*y
squarex
1:50*10
1:50*10
1:500/10
10:500
h <- c(3.6,5.5,3.7,8.5,6.9,2.6,8,1.6,4,7.6)
sub1 <- h[5]
sub2 <- h[c(2,6,7)]
sub2
reord
reord <- h[c(10,3,7,5,6,2,1,8,4,9)]
reord
lettersVector <- c("R", "T", "E", "C", "V", "O")
numericVecotr <- c(5, 3, 4, 2, 6, 1)
lettersVector <- c("R", "T", "E", "C", "V", "O")
numericVector <- c(5, 3, 4, 2, 6, 1)
thaAnswer
theAnswer
lettersVector <- c("R", "T", "E", "C", "V", "O")
theAnswer <- lettersVector[numericVector]
theAnswer
snakedata <- data.frame(Name = c("Cobra", "Taipan", "Python"),
Diet = c("Rats", "Rats", "Possums"), Size = c(4,4.5,8))
snakedata
setwd("/Users/jamesdorey/Desktop/Uni/Teaching/BIOL252_852/Pracs/P2")
mydata <- read.table(file="Barnacle geese data.csv", sep = ",", header = TRUE)
mydata <- read.table(file="Barnacle_geese_data.csv", sep = ",", header = TRUE)
mydata
mydata
mydata <- read.table(file="Barnacle_geese_data.csv", sep = ",", header = TRUE)
mydata
newData
mydata
newData <- mydata[
# Take the first five rows of data (first five animals)
1:5,
# Take the 1st and 4th columns
c(1,4)]
newData
plot(x=mydata$GroupSize, y=mydata$PercentageVigilance)
groupsize <- mydata$GroupSize
vigilance <- mydata$PercentageVigilance
plot(vigilance ~ groupsize)
plot(vigilance ~ groupsize, pch=19, cex=1.5, col="blue",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
reg <- lm(vigilance ~ groupsize)
summary(reg)
plot(vigilance ~ groupsize, pch=19, cex=1.5, col="blue",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
abline(reg, col="red", lwd=2)
vigilance
plot(vigilance[1:10] ~ groupsize[1:10], pch=19, cex=1.5, col="blue",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
plot(vigilance[1:10] ~ groupsize[1:10], pch=15, cex=1.5, col="red",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
plot(vigilance[1:10] ~ groupsize[1:10], pch=15, cex=3, col="red",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
abline(reg, col="red", lwd=2)
plot(vigilance[1:10] ~ groupsize[1:10], pch=15, cex=3, col="red",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
abline(reg, col="red", lwd=2)
plot(vigilance[1:10] ~ groupsize[1:10], pch=15, cex=3, col="red",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
abline(reg, col="hotpink", lwd=2)
plot(vigilance[1:10] ~ groupsize[1:10], pch=15, cex=3, col="red",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
abline(reg, col="hotpink", lwd=6)
sex <- mydata$Sex
time <- mydata$TimeOfDay
boxplot(vigilance ~ sex,
xlab = "Sex",
ylab = "% of Time Spent in Vigilance",
main = "The Effect of Sex on Vigilance")
boxplot(vigilance ~ time,
xlab = "Time of Day",
ylab = "% of Time Spent in Vigilance",
main = "The Effect of Tim of Day on Vigilance")
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
# Load core packages
library(dplyr)
library(readr)
demonstratorVersion = FALSE
# This is a comment explaining the code below
x <- 5
y <- 3
sum <- x + y
print(sum)
rm(list=ls())
a <- 4
b <- 2
a
b
a + b
a * a
a - a*b
c <- a + b
class(a)
class(c)
hi <- "hello"
class(hi)
?class
x <- c(4,8,2)
y <- c(6,8,9)
snakes <- c("cobra", "brown snake", "python")
class(x)
class(snakes)
invec <- 1:10
invec
squarex <- x^2
squarootx <- sqrt(x)
xagain <- sqrt(squarex)
sumx <- sum(x)
sumxy <- sum(x,y)
prodxy <- x*y
1:50*10
h <- c(3.6,5.5,3.7,8.5,6.9,2.6,8,1.6,4,7.6)
sub1 <- h[5]
sub2 <- h[c(2,6,7)]
sub3 <- h[8:10]
reord <- h[c(10,3,7,5,6,2,1,8,4,9)]
lettersVector <- c("R", "T", "E", "C", "V", "O")
numericVector <- c(5, 3, 4, 2, 6, 1)
theAnswer <- lettersVector[numericVector]
theAnswer
snakedata <- data.frame(Name = c("Cobra", "Taipan", "Python"),
Diet = c("Rats", "Rats", "Possums"), Size = c(4,4.5,8))
setwd("/Users/jamesdorey/Desktop/Uni/Teaching/BIOL252_852/Pracs/P2")
mydata <- read.table(file="Barnacle_geese_data.csv", sep = ",", header = TRUE)
mydata
# Take the first ROW of data
mydata[1,]
# Take the first COLUMN of data
mydata[,2]
mydata$Sex
newData <- mydata[
# Take the first five rows of data (first five animals)
1:5,
# Take the 1st and 4th columns
c(1,4)]
# The output:
newData
plot(x=mydata$GroupSize, y=mydata$PercentageVigilance)
groupsize <- mydata$GroupSize
vigilance <- mydata$PercentageVigilance
plot(vigilance ~ groupsize)
plot(vigilance ~ groupsize, pch=19, cex=1.5, col="blue",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
reg <- lm(vigilance ~ groupsize)
summary(reg)
plot(vigilance ~ groupsize, pch=19, cex=1.5, col="blue",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
abline(reg, col="red", lwd=2)
plot(vigilance[1:10] ~ groupsize[1:10], pch=15, cex=3, col="red",
xlab = "Group Size", ylab = "% of Time Spent in Vigilance")
abline(reg, col="hotpink", lwd=6)
sex <- mydata$Sex
time <- mydata$TimeOfDay
boxplot(vigilance ~ sex,
xlab = "Sex",
ylab = "% of Time Spent in Vigilance",
main = "The Effect of Sex on Vigilance")
boxplot(vigilance ~ time,
xlab = "Time of Day",
ylab = "% of Time Spent in Vigilance",
main = "The Effect of Tim of Day on Vigilance")
sex_lm <- lm(vigilance~sex)
summary(sex_lm)
time_lm <- lm(vigilance~time)
summary(time_lm)
anova(time_lm)
mydata
## ANSWER 1:
fg <- c("go", 3, 4)
class(fg)
#ANSWER 3:
lett <- c("R","T","E","C","V","O")
lett[num]
#ANSWER 3:
lett <- c("R","T","E","C","V","O")
num <- c(5,3,4,2,6,1)
lett[num]
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
demonstratorVersion = FALSE
demonstratorVersion
rm(list = ls())
# Markdown written by Damien Esquerre and update by James B Dorey
# (desquerre@uow.edu.au)
# (jdorey@uow.edu.au; jbdorey@me.com).
# markdown packages
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
# Set toe TRUE if you want to output the demonstrator answers in the markdown
demonstratorVersion = TRUE
install.packages("learnPopGen")
install.packages("learnPopGen",
repos = "http://cran.us.r-project.org")
# Markdown written by Damien Esquerre and update by James B Dorey
# (desquerre@uow.edu.au)
# (jdorey@uow.edu.au; jbdorey@me.com).
# markdown packages
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
# Set toe TRUE if you want to output the demonstrator answers in the markdown
demonstratorVersion = TRUE
install.packages("learnPopGen")
library(learnPopGen)
setwd("/Users/jamesdorey/Desktop/Uni/Teaching/BIOL252_852/Pracs/P3")
n_individuals <- 50
?sample
# Generate random genotypes for the population (assuming Hardy-Weinberg equilibrium)
# We'll use 0 for genotype "aa," 1 for genotype "Aa," and 2 for genotype "AA"
genotypes <- sample(x = c("AA", "Aa", "aa"), size = n_individuals, replace = TRUE)
genotypes
# Reshape the data into a data frame
data <- data.frame(Individual = rep(1:n_individuals, each = 1), Genotype = genotypes)
data
# Add allele columns to the data frame
data$Allele_A <- ifelse(data$Genotype == "AA", 2, ifelse(data$Genotype == "Aa", 1, 0))
data$Allele_a <- ifelse(data$Genotype == "aa", 2, ifelse(data$Genotype == "Aa", 1, 0))
data
# View the first few rows of the generated dataset
head(data)
## Q1 Answer:
q <- 1 - p
sum(data$Genotype == "aa")
# Let's take p to be the proportion of allele A, you could also do a simple count, but let's use
# R to answer this for us in this case
p <- (sum(data$Genotype == "aa")*2) + sum(data$Genotype == "Aa")
p
## Q1 Answer:
q <- 1 - p
q
# Let's take p to be the proportion of allele A, you could also do a simple count, but let's use
# R to answer this for us in this case
p <- ((sum(data$Genotype == "aa")*2) + sum(data$Genotype == "Aa"))
p
# Let's take p to be the proportion of allele A, you could also do a simple count, but let's use
# R to answer this for us in this case
p <- (sum(data$Genotype == "aa")*2 + sum(data$Genotype == "Aa"))
p
# Let's take p to be the proportion of allele A, you could also do a simple count, but let's use
# R to answer this for us in this case
p <- (sum(data$Genotype == "aa")*2 + sum(data$Genotype == "Aa"))/nrow(data)*2
p
nrow(data)
# Let's take p to be the proportion of allele A, you could also do a simple count, but let's use
# R to answer this for us in this case
p <- (sum(data$Genotype == "aa")*2 + sum(data$Genotype == "Aa"))/(nrow(data)*2)
p
## Q1 Answer:
q <- 1 - p
q
expectedAA <- p*p
expectedAA
expectedAA <- p^2
expectedAA
expectedaa <- q^2
expectedAa <- 2*p*q
expectedAa
expectedaa
sum(expected_AA, expected_Aa, expected_aa)
expected_AA <- p^2
expected_aa <- q^2
sum(expected_AA, expected_Aa, expected_aa)
## Q1 Answer:
q <- 1 - p
expected_AA <- p^2
expected_Aa <- 2*p*q
expected_aa <- q^2
sum(expected_AA, expected_Aa, expected_aa)
write.csv(data, file="data.csv")
# Let's take p to be the proportion of allele a, you could also do a simple count, but let's use
# R to answer this for us in this case (Note there are MANY ways to do this)
# In the first component, we times it by 2 becuase there are two a alleles in an aa genotype
p <- (n_aa*2 + n_Aa)/(nrow(data)*2)
n_AA <- sum(data$Genotype == "AA")
n_Aa <- sum(data$Genotype == "Aa")
n_aa <- sum(data$Genotype == "aa")
n_AA <- sum(data$Genotype == "AA")
n_Aa <- sum(data$Genotype == "Aa")
n_aa <- sum(data$Genotype == "aa")
# Let's take p to be the proportion of allele a, you could also do a simple count, but let's use
# R to answer this for us in this case (Note there are MANY ways to do this)
# In the first component, we times it by 2 becuase there are two a alleles in an aa genotype
p <- (n_aa*2 + n_Aa)/(nrow(data)*2)
p
# OR
p <- (sum(data$Genotype == "aa")*2 + sum(data$Genotype == "Aa"))/(nrow(data)*2)
p <- (sum(data$Genotype == "aa")*2 + sum(data$Genotype == "Aa"))/(nrow(data)*2)
p
write.csv(data, file="data.csv")
total_genotypes <- n_AA + n_Aa + n_aa
total_genotypes <- n_AA + n_Aa + n_aa
genotype_freq_AA <- n_AA / total_genotypes
genotype_freq_Aa <- n_Aa / total_genotypes
genotype_freq_aa <- n_aa / total_genotypes
genotype_freq_AA
genotype_freq_Aa
genotype_freq_aa
expected_AA
expected_Aa
expected_aa
total_genotypes
p <- genotype_freq_AA + genotype_freq_Aa/2
p
# Convert expected frequencies to counts by multiplying by the number of individuals:
expectedAAcounts <- expectedAA*(n_individuals)
expectedAacounts <- expectedAa*(n_individuals)
expectedAAcounts
expectedAacounts
expectedaacounts
expectedaacounts <- expectedaa*(n_individuals)
expectedaacounts
chisqAA <- (n_AA-expectedAAcounts)^2/expectedAAcounts
chisqAA
chisqAa <- (n_Aa-expectedAacounts)^2/expectedAacounts
chisqaa <- (n_aa-expectedaacounts)^2/expectedaacounts
chisqaa
chisquare <- chisqAA+chisqAa+chisqaa
chisquare
TEST <- dplyr::tibble(Observed = c(n_AA, n_Aa, n_aa),
Expected = c(expectedAAcounts, expectedAacounts, expectedaacounts))
TEST
chisq.test(TEST)
ObsExp_table <- as.table(Observed = c(n_AA, n_Aa, n_aa),
Expected = c(expectedAAcounts, expectedAacounts, expectedaacounts))
ObsExp_table <- as.data.frame(Observed = c(n_AA, n_Aa, n_aa),
Expected = c(expectedAAcounts, expectedAacounts, expectedaacounts))
?as.data.frame
ObsExp_table <- as.table(
rbind(
Observed = c(n_AA, n_Aa, n_aa),
Expected = c(expectedAAcounts, expectedAacounts, expectedaacounts)))
ObsExp_table
ObsExp_table <- dplyr::tibble(Observed = c(n_AA, n_Aa, n_aa),
Expected = c(expectedAAcounts, expectedAacounts, expectedaacounts))
chisq.test(ObsExp_table)
chisquare
?chisq.test
genotype_freq_Aa
n_AA
n_AA
n_aa
n_Aa
n_aa
expectedAA
expectedAA
n_individuals
?genetic.drift
genetic.drift(p0=0.5, Ne=100, nrep=10, time=100, show="p", pause=0.1)
genetic.drift(p0=0.5, Ne=100, nrep=10, time=100, show="genotypes", pause=0.1)
genetic.drift(p0=0.5, Ne=100, nrep=10, time=100, show="genotypes", pause=0.1)
genetic.drift(p0=0.5, Ne=100, nrep=10, time=100, show="genotypes", pause=0.1)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:41)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:45)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=50000, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=500, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=500, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=500, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=500, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:50)
founder.event(p0=0.5, Ne=5000, Nf=5, ttime=100, etime=40:50)
selection(p0=0.01, w=c(1.0,0.9,0.8), time=100)
selection(p0=0.01, w=c(1.0,0.9,0.8), time=100)
selection(p0=0.01, w=c(1.0,0.9,0.8), time=100)
selection(p0=0.01, w=c(1.0,0.9,0.8), time=100)
selection(p0=0.01, w=c(1.0,0.9,0.2), time=100)
selection(p0=0.01, w=c(1.0,0.9,0.2), time=100)
selection(p0=0.01, w=c(1.0,0.9,0.2), time=100)
selection(p0=0.01, w=c(1.0,0.9,0.8), time=100, color="blue")
selection(p0=0.99, w=c(0.8,0.9,1), time=100, add = TRUE, color = "red")
selection(p0=0.01, w=c(0.2,0.9,0.2), time=100, color="blue")
selection(p0=0.01, w=c(0.2,0.9,0.3), time=100, color="blue")
selection(p0=0.01, w=c(0.2,0.9,0.6), time=100, color="blue")
selection(p0=0.01, w=c(0.2,0.9,0.7), time=100, color="blue")
selection(p0=0.01, w=c(0.2,0.9,0.9), time=100, color="blue")
selection(p0=0.01, w=c(0.2,0.9,0.8), time=100, color="blue")
drift.selection(p0=0.5, Ne=100, w=c(1,1,0.9), ngen=400, nrep=10)
drift.selection(p0=0.5, Ne=100, w=c(0.2,1,0.9), ngen=400, nrep=10)
drift.selection(p0=0.5, Ne=100, w=c(0.5,1,0.9), ngen=400, nrep=10)
drift.selection(p0=0.5, Ne=100, w=c(0.8,1,0.9), ngen=400, nrep=10)
drift.selection(p0=0.5, Ne=1000, w=c(0.8,1,0.9), ngen=400, nrep=10)
msd(p0=c(0.5,0.5), Ne=c(100,100), w=list(c(1,1,1),c(1,1,1)), m=c(0.01,0.01),
ngen=400, colors=c("red","blue"))
msd(p0=c(0.5,0.5), Ne=c(100,100), w=list(c(1,1,1),c(1,1,1)), m=c(0.01,0.01),
ngen=400, colors=c("red","blue"))
msd(p0=c(0.5,0.5), Ne=c(100,100), w=list(c(1,1,1),c(1,1,1)), m=c(0.01,0.01),
ngen=400, colors=c("red","blue"))
msd(p0=c(0.5,0.5), Ne=c(100,100), w=list(c(1,1,1),c(1,1,1)), m=c(0.01,0.01),
ngen=400, colors=c("red","blue"))
msd(p0=c(0.5,0.5), Ne=c(1000,1000), w=list(c(1,1,1),c(1,1,1)), m=c(0.01,0.01),
ngen=400, colors=c("red","blue"))
msd(p0=c(0.5,0.5), Ne=c(1000,1000), w=list(c(1,0.9,0.8),c(1,0.9,0.8)), m=c(0.01,0.01),
ngen=400, colors=c("red","blue"))
mutation.selection(p0=0.5, w=c(1,0), u=0, time=200, show="p")
mutation.selection(p0=0.5, w=c(1,0), u=0, time=200, show="p")
mutation.selection(p0=0.5, w=c(1,0), u=0.01, time=100, show="p")
nloci = 1
phenotype.freq(nloci=1, p=NULL, effect=1/nloci)
nloci = 3
phenotype.freq(nloci=3, p=NULL, effect=1/nloci)
nloci = 10
phenotype.freq(nloci=10, p=NULL, effect=1/nloci)
nloci = 6
phenotype.selection(nloci=6, p=NULL, effect=1/nloci, beta=0.5, ngen=20)
