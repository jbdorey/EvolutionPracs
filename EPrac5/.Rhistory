# Set the RootPath to Prac4 folder
RootPath <- "/Users/jamesdorey/Desktop/Uni/Teaching/BIOL365_971/BIOL365_pracs_2024/EPrac5"
setwd(RootPath)
# Set the RootPath to Prac1 folder
# This is the example path to MY FOLDER.
RootPath <- "/Users/jamesdorey/Desktop/Uni/Teaching/BIOL365_971/BIOL365_pracs_2024/EPrac5"
# You can then set this as the project's working directory.
setwd(RootPath)
CRAN_packageList <- c(
# Tidyverse packages:
"dplyr",
"magrittr", # This package is critical if R says that it can't find the function "%>%"
"tibble",            #  A lovely table format package
"tidyr",             # Another data maniupulation package from the tidyverse
"stringr",           #  to manipulate text strings
"readxl",  # Lets you read in excel files
# GENETICS packages on CRAN
"rentrez",
"ape",
"msaR",
"phangorn",
"phytools",
"corHMM",
# General R package to help with phytools
"plotrix",
# General R package to help with BeeBDC
"taxadb",
# This package gives you access to "bioconductor" packages
"BiocManager",
)
CRAN_packageList <- c(
# Tidyverse packages:
"dplyr",
"magrittr", # This package is critical if R says that it can't find the function "%>%"
"tibble",            #  A lovely table format package
"tidyr",             # Another data maniupulation package from the tidyverse
"stringr",           #  to manipulate text strings
"readxl",  # Lets you read in excel files
# GENETICS packages on CRAN
"rentrez",
"ape",
"msaR",
"phangorn",
"phytools",
"corHMM",
# General R package to help with phytools
"plotrix",
# General R package to help with BeeBDC
"taxadb",
# This package gives you access to "bioconductor" packages
"BiocManager"
)
# Install the packages that are hosted on CRAN
install.packages(pkgs = c(CRAN_packageList),
rebuild = FALSE,
repos = "http://cran.us.r-project.org")
# READ in your packages
lapply(c(packageList, "dplyr", "magrittr", "ape", "rentrez"),
library, character.only = TRUE)
# READ in your packages
lapply(c(CRAN_packageList, "dplyr", "magrittr", "ape", "rentrez"),
library, character.only = TRUE)
myFirstSearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Geospiza[Organism]) OR Camarhynchus[Organism]
OR Certhidea[Organism]) AND (mitochondrion[filter])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 200)
myFirstSearch
myFailedSearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Lasioglossum[Organism])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 200)
myFailedSearch
myFailedSearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Apis[Organism])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 200)
myFailedSearch
myFailedSearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Apis[Organism])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 500)
myFailedSearch
failedGenbank <- ape::read.GenBank(access.nb = myFirstSearch$ids)
failedGenbank
myFailedSearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Apis[Organism]) OR (Homalictus[Organism])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 500)
myFailedSearch
myFailedSearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Apis[Organism]) OR (Homalictus[Organism])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 1200)
failedGenbank <- ape::read.GenBank(access.nb = myFirstSearch$ids)
failedGenbank
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids)
myFailedSearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Apis[Organism])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 1200)
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids)
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[1:200])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[200:400])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[200:500])
myFailedSearch
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[200:435])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[100:435])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[0:350])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[0:400])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[0:399])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[0:390])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[0:380])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[0:370])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[1:375])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[1:376])
failedGenbank <- ape::read.GenBank(access.nb = myFailedSearch$ids[1:377])
myCheekySearch <- rentrez::entrez_search(db = "nucleotide",
term = "(cytb[Gene Name]) AND (Apis[Organism])",
# With this new search term, I can see 171 sequences, which is enough for me to
# download, I think! So, I'll set this in retmax
retmax = 500)
myCheekySearch
class(myCheekySearch)
myCheekySearch$ids
# What we actually need are the accession numbers form the myCheekySearch object. Let's turn this
# vector into a list of vectors, each 200 long. I'm going to write it in the tidyverse because
# it's easy for me, but it might not be the most concise way to do this.
myCheekySearch_list <- myCheekySearch$ids %>%
dplyr::tibble(accessionIDs = .) %>%
# Group by the row number and step size (200 IDs at once)
dplyr::group_by(group = ceiling(dplyr::row_number()/200)) %>%
# Split the dataset up into a list by group
dplyr::group_split(.keep = TRUE)
myCheekySearch_list
myCheekySearch_list[1]
myCheekySearch_list[2]
# You can check out any element of the list... let's look at the 2nd
myCheekySearch_list[[2]]
?lapply
# Now we can apply the functino across a list using lapply
TEST <- lapply(
# The daa to feed into the function
X = myCheekySearch_list,
FUN = ape::read.GenBank
)
# Now we can apply the functino across a list using lapply
TEST <- lapply(
# The daa to feed into the function
X = myCheekySearch_list,
FUN = read.GenBank
)
# Now we can apply the functino across a list using lapply
TEST <- lapply(
# The daa to feed into the function
X = myCheekySearch_list,
FUN = read.GenBank()
)
# Now we can apply the functino across a list using lapply
TEST <- myCheekySearch_list %>%
lapply(
X = .,
FUN = dplyr::pull,
accessionIDs
)
TEST
# Now we can apply the function across a list using lapply
TEST <- myCheekySearch_list %>%
# FIrst, let's pass our list into lapply to extract (pull out) on the accessionIDs
lapply(
# Remember, when you use the pipe, %>%, you can call the data being passed in with "."
X = .,
FUN = dplyr::pull,
accessionIDs
) %>%
lapply(
# The data to feed into the function
X = .,
FUN = read.GenBank
)
TEST
TEST2 <- TEST %>%
append()
TEST2 <- TEST %>%
append(.)
?DNAbin
TEST2 <- TEST %>%
lapply(X = .,
FUN = append)
TEST[1]
TEST2 <- append(TEST[1], TEST[2])
TEST2
TEST2 <- append(TEST[[1]], TEST[[2]])
TEST2
TEST %>%
lapply(X = .,
FUN = append)
TEST %>%
lapply(X = .,
FUN = append)
TEST %>%
lapply(X = .,
FUN = append())
purrr::map(TEST, append)
TEST %>%
parallel::mclapply(X = .,
FUN = append())
parallel::mclapply(X = TEST,
FUN = append())
FUN = append
parallel::mclapply(X = TEST,
FUN = append)
lapply(TEST, function(x) list(x))
TEST
unlist(TEST)
lapply(TEST, append, list(x))
lapply(TEST, append(x), list(x))
append(x)
lapply(TEST, function(x){
append(x)
})
?
append
1:length(TEST)
for(i in 1:length(TEST)){
if(i == 1){
TEST2 <- append(TEST[[i]], TEST[[i+1]])
}else{
TEST2 <- append(TEST2[[i]], TEST[[i+1]])
}
}
length(TEST)-1
for(i in 1:length(TEST)-1){
if(i == 1){
TEST2 <- append(TEST[[i]], TEST[[i+1]])
}else{
TEST2 <- append(TEST2[[i]], TEST[[i+1]])
}
}
i
1:length(TEST)-1
1:(length(TEST)-1)
for(i in 1:(length(TEST)-1)){
if(i == 1){
TEST2 <- append(TEST[[i]], TEST[[i+1]])
}else{
TEST2 <- append(TEST2[[i]], TEST[[i+1]])
}
}
TEST2
TEST2 <- append(TEST2[i], TEST[i+1])
for(i in 1:(length(TEST)-1)){
if(i == 1){
TEST2 <- append(TEST[i], TEST[i+1])
}else{
TEST2 <- append(TEST2[i], TEST[i+1])
}
}
TEST2
TEST
TEST2 <- append(TEST[[1]], TEST[[2]])
TEST2
for(i in 1:(length(TEST)-1)){
if(i == 1){
TEST2 <- append(TEST[[i]], TEST[[i+1]])
}else{
TEST2 <- append(TEST2[[i]], TEST[[i+1]])
}
}
TEST2
for(i in 1:(length(TEST)-1)){
if(i == 1){
TEST2 <- append(TEST[[i]], TEST[[i+1]])
}else{
TEST2 <- append(TEST2, TEST[[i+1]])
}
}
TEST2
# Now we can apply the function across a list using lapply
GenBank_list <- myCheekySearch_list %>%
# FIrst, let's pass our list into lapply to extract (pull out) on the accessionIDs
lapply(
# Remember, when you use the pipe, %>%, you can call the data being passed in with "."
X = .,
FUN = dplyr::pull,
accessionIDs) %>%
lapply(
# The data to feed into the function
X = .,
FUN = read.GenBank)
# Read in the data from last week
DarwinFinches_cytB_lw <- base::readRDS("DarwinFinches_cytB.rds")
# msaR agrees that fasta is a fantastic data format and but it recognises that not
# everyone thinks this way. So, it has provided a function to transform a DNAbin object,
# among several others, to fasta
finchSpecies_fasta <- msaR::as.fasta(finchSpecies)
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
# Load core packages
library(dplyr)
library(dynRB)
# Use ape to read in the aligned sequences
alignedDNAbin <- ape::read.FASTA("alignedDNAbin.fasta")
alignedDNAbin
# Use ape to read in the aligned sequences
alignedDNAbin <- ape::read.FASTA("alignedDNAbin.fasta")
alignedDNAbin
# msaR agrees that fasta is a fantastic data format and but it recognises that not
# everyone thinks this way. So, it has provided a function to transform a DNAbin object,
# among several others, to fasta
finchSpecies_fasta <- msaR::as.fasta(finchSpecies)
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
# Load core packages
library(dplyr)
library(dynRB)
# msaR agrees that fasta is a fantastic data format and but it recognises that not
# everyone thinks this way. So, it has provided a function to transform a DNAbin object,
# among several others, to fasta
finchSpecies_fasta <- msaR::as.fasta(finchSpecies)
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
# Load core packages
library(dplyr)
library(dynRB)
install.packages("dynRB")
renv::init(RootPath)
install.packages("dynRB")
# Markdown written by James B Dorey; contact jdorey@uow.edu.au (jbdorey@me.com) if help is needed.
# markdown packages
library(rmarkdown)
# Load core packages
library(dplyr)
library(dynRB)
install.packages("dynRB")
finchSpecies_fasta <- msaR::as.fasta("alignedDNAbin.fasta")
finchSpecies_fasta <- msaR::as.fasta("/Users/jamesdorey/Desktop/Uni/Teaching/BIOL365_971/BIOL365_pracs_2024/EPrac3/alignedDNAbin.fasta")
finchSpecies_fasta
class(finchSpecies_fasta)
# Let's say that we make two simple data frames
FirstDataFrame <- dplyr::tibble(column1 = c(1, 2, 3, 4, 5, 6))
FirstDataFrame
SecondDataFrame <- dplyr::tibble(column1 = c("a", "b", "c", "d", "e"))
SecondDataFrame
# Can you already see the problem with joining these datasets? Let's have a look...
# how long is each dataset?
nrow(FirstDataFrame)
nrow(SecondDataFrame)
# They are different lengths! So, what happens when we do a very simple merge?
failedMerge <- dplyr::bind_cols(FirstDataFrame, SecondDataFrame)
# Download the outgroup cytB sequence, HQ153059, for the sister taxon, *Asemospiza obscura*
A_obscura_cytB <- ape::read.GenBank(access.nb = "HQ153059")
# We can combine the dataset from last week with the outgroup DNAbin objects simply
# by appending them together.
DarwinFinches_cytB <- append(DarwinFinches_cytB_lw, A_obscura_cytB)
# Annoyingly, we need to maually re-create the attributes for the DNAbin object and then re-
# add them to the DNAbin object
DarwinAttributes <- list(
names = c(attributes(DarwinFinches_cytB_lw)$names,
attributes(A_obscura_cytB)$names),
class = attributes(DarwinFinches_cytB_lw)$class,
description = c(attributes(DarwinFinches_cytB_lw)$description,
attributes(A_obscura_cytB)$description),
species = c(attributes(DarwinFinches_cytB_lw)$species,
attributes(A_obscura_cytB)$species)
)
attributes(DarwinFinches_cytB) <- DarwinAttributes
# Find the sequence lengths and turn them into a numeric list in order of how they were
# found in DarwinFinches_cytB
seqLengths <- lapply(DarwinFinches_cytB, length) %>%
as.numeric()
# Lets build a tibble column-by-column
genBankSummaryTibble <- tibble::tibble(
accessionID = attributes(DarwinFinches_cytB)$names,
species = attributes(DarwinFinches_cytB)$species,
seqLength = seqLengths,
description = attributes(DarwinFinches_cytB)$description,
)
# Let's have a look!
genBankSummaryTibble
# Let us begin to manipulate the tibble to do what we want!
# We will put this new table into a new R object called theChosenSeqs
theChosenSeqs <- genBankSummaryTibble %>%
# Keep only sequences less than 1,500 basepairs to ignore the mitogenomes
dplyr::filter(seqLength < 1500) %>%
# remove the control region sequences
# What's that "!" mean?! This simple bit of syntax just means "get the opposite of"
# so, instead of returning all strigns where "control region" is detected, it
# returns all where it is NOT detected.
dplyr::filter(!stringr::str_detect(description, "control region")) %>%
# Group the data by species and then any sorting or filtering will be done
# WITHIN that group
dplyr::group_by(species) %>%
# Sort by species and then by sequence length (top-down; descending)
dplyr::arrange(species, dplyr::desc(seqLength))
# Quickly, have a look at what you've made...
theChosenSeqs
# Now, let us take the top sequence of each group
theChosenSeqs <- theChosenSeqs %>%
dplyr::filter(dplyr::row_number() == 1)
# Extending this logic, we can use the accessionID column from theChosenSeqs to filter out
# all of the sequences that we're interested in.
finchSpecies <- DarwinFinches_cytB[theChosenSeqs$accessionID]
# But you know what having accession numbers alone is a bit annoying. Lets add
# species names as well!
# NOTE: This is an example of complex code that you need not worry too much about
attributes(finchSpecies)$names <- stringr::str_c(theChosenSeqs$species,
theChosenSeqs$accessionID,
sep = "_")
# msaR agrees that fasta is a fantastic data format and but it recognises that not
# everyone thinks this way. So, it has provided a function to transform a DNAbin object,
# among several others, to fasta
finchSpecies_fasta <- msaR::as.fasta(finchSpecies)
# But, many R programs demand sequences of equal length. Don't worry too much about the
# below but let me help you out here...
# Please DON'T FREAK OUT when seeing this code; I'm just giving it to you
# to do some data wizardry (with some notes IF you're interested)
# First, lets add our fasta text into the "sequence" column of a new tibble (data frame)
lengthCorrectionTable <- tibble::tibble(sequence = finchSpecies_fasta) %>%
# Separate sequences from one another, using the ">" as a delimiter
tidyr::separate_longer_delim(cols = "sequence",
delim = ">") %>%
# Remove the first row from the tibble
dplyr::filter(!dplyr::row_number() == 1 ) %>%
dplyr::as_tibble() %>%
# Remove the hanging line break at the end of each sequence
dplyr::mutate(sequence = sequence %>% stringr::str_remove("\\n$")) %>%
# Use the name > sequence line break to separate them
tidyr::separate_wider_delim(sequence, delim = "\n",
names = c("name","sequence")) %>%
# THIS is the magic part, let's add blank "-" loci to pad out our alignments to the same length
dplyr::mutate(lengthenedSequence = stringr::str_pad(sequence, pad = "-", side = "right",
width = max(stringr::str_count(sequence))),
# If you want, you can check this object to see that lengths are the same
length2 = stringr::str_count(lengthenedSequence))
# Now, we can turn this back into a fasta format... Asian don't worry too much about
# this code.
equalisedFasta <- stringr::str_c(">",lengthCorrectionTable$name,"\n",
lengthCorrectionTable$lengthenedSequence,
collapse = "\n")
# We can read this fasta in as a Biostrings object
equalised_BioString <- Biostrings::readDNAStringSet("equalisedFasta.fasta")
install.packages("Biostrings")
# We can read this fasta in as a Biostrings object
equalised_BioString <- Biostrings::readDNAStringSet("equalisedFasta.fasta")
# START PAYING ATTENTION AGAIN!
# finally, we can interactively look at our alignment!
msaR::msaR(equalised_BioString, menu=T, overviewbox = T, labelNameLength = 200)
msaR::msaR(equalised_BioString, menu=T, overviewbox = T, labelNameLength = 200)
install.packages("plotrix")
